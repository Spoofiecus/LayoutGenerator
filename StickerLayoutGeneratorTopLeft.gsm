Sub CreateStickerLayout()
    ' Set the document units to millimeters (mm)
    ActiveDocument.Unit = cdrMillimeter

    ' Ensure there's an active selection
    If ActiveDocument Is Nothing Or ActiveSelection.Shapes.Count = 0 Then
        MsgBox "Please select at least one shape.", vbExclamation, "No Selection"
        Exit Sub
    End If

    ' Prompt user for the total number of stickers needed
    Dim totalStickers As Integer
    totalStickers = InputBox("Enter the total number of stickers needed:", "Total Stickers", 10)
    If totalStickers <= 0 Then
        MsgBox "Invalid input. Please enter a positive number.", vbExclamation, "Invalid Input"
        Exit Sub
    End If

    ' Prompt user for the number of stickers per row
    Dim stickersPerRow As Integer
    stickersPerRow = InputBox("Enter the number of stickers per row:", "Stickers Per Row", 5)
    If stickersPerRow <= 0 Then
        MsgBox "Invalid input. Please enter a positive number.", vbExclamation, "Invalid Input"
        Exit Sub
    End If

    ' Get the first shape's dimensions for consistent sizing
    Dim baseShape As Shape
    Set baseShape = ActiveSelection.Shapes(1)
    Dim stickerWidth As Double
    Dim stickerHeight As Double
    stickerWidth = baseShape.SizeWidth
    stickerHeight = baseShape.SizeHeight

    ' Get page dimensions
    Dim pageWidth As Double
    pageWidth = ActivePage.SizeWidth

    ' Calculate automatic horizontal spacing
    Dim spacingX As Double
    spacingX = (pageWidth - (stickersPerRow * stickerWidth)) / (stickersPerRow - 1)
    If spacingX < 0 Then spacingX = 0 ' Ensure no negative spacing

    ' Prompt user for spacing between rows (vertical spacing)
    Dim spacingY As Double
    spacingY = InputBox("Enter the spacing between rows (vertical spacing):", "Vertical Spacing", 0.5)
    If spacingY < 0 Then
        MsgBox "Invalid input. Please enter a non-negative number.", vbExclamation, "Invalid Input"
        Exit Sub
    End If

    ' Position variables
    Dim startX As Double
    Dim startY As Double
    startX = ActivePage.LeftX
    startY = ActivePage.TopY

    ' Create duplicates in reverse order for top-left cutting start
    Dim duplicateShape As Shape
    Dim i As Integer
    Dim rowCounter As Integer, colCounter As Integer
    Dim xPos As Double, yPos As Double

    For i = totalStickers - 1 To 0 Step -1
        ' Calculate row and column for the i-th sticker (0-indexed)
        rowCounter = Int(i / stickersPerRow)
        colCounter = i Mod stickersPerRow

        ' Calculate corner Y position
        yPos = startY - rowCounter * (stickerHeight + spacingY)

        ' Calculate corner X position based on boustrophedon layout
        If (rowCounter Mod 2) = 0 Then
            ' Even row: left-to-right
            xPos = startX + colCounter * (stickerWidth + spacingX)
        Else
            ' Odd row: right-to-left
            xPos = startX + (stickersPerRow - 1 - colCounter) * (stickerWidth + spacingX)
        End If

        ' Create a duplicate of the first shape and position it by its center
        Set duplicateShape = baseShape.Duplicate
        duplicateShape.SetPosition xPos + stickerWidth / 2, yPos - stickerHeight / 2
    Next i

    MsgBox "Stickers created successfully! Cutting should now start from the top-left.", vbInformation, "Success"
End Sub
