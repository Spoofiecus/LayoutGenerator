' Custom data type to hold the results for a single orientation calculation
Private Type OrientationMetrics
    PricePerSticker As Currency ' Use Currency for high-precision financial math
    StickersPerRow As Long
    RowHeight As Double
End Type

' --- Function to Calculate Metrics for a Single Orientation based on Final Spreadsheet Logic ---
Private Function CalculateOrientationMetrics(ByVal W As Double, ByVal H As Double, ByVal costPerSqm As Double, ByVal useBleedLogic As Boolean) As OrientationMetrics
    ' --- Constants ---
    Const ROLL_WIDTH_MM As Long = 650
    Const MIN_PRICE_PER_STICKER As Currency = 0.2

    ' Determine the gap for the layout calculation based on bleed option
    Dim layoutGap As Long
    If useBleedLogic Then
        layoutGap = 0
    Else
        layoutGap = 1
    End If

    ' --- Stickers per Row Calculation (Layout) ---
    Dim stickersPerRow As Long
    If (W + layoutGap) > 0 Then
        stickersPerRow = Int(ROLL_WIDTH_MM / (W + layoutGap))
    Else
        stickersPerRow = 0
    End If

    ' --- Pricing Calculation (based on final user spreadsheet logic) ---
    Dim price As Currency
    If stickersPerRow > 0 Then
        ' 1. Calculate the 'allocated width' for each sticker on the roll
        Dim allocatedWidth As Double ' Keep as double for division precision
        allocatedWidth = ROLL_WIDTH_MM / stickersPerRow

        ' 2. Calculate the area of vinyl consumed by one sticker using its allocated width
        '    The dimension used for pricing depends on whether the source shape included bleed.
        Dim pricingH As Double
        If useBleedLogic Then
            pricingH = H - 1
        Else
            pricingH = H
        End If
        Dim consumedAreaSqm As Double
        consumedAreaSqm = (allocatedWidth * pricingH) / 1000000

        ' 3. Calculate the final price using the vinyl cost. No markup.
        price = CCur(consumedAreaSqm * costPerSqm)
    Else
        price = 999999 ' A very large number for Currency type
    End If

    ' Enforce minimum price per sticker
    If price < MIN_PRICE_PER_STICKER Then
        price = MIN_PRICE_PER_STICKER
    End If

    ' --- Return Results ---
    Dim result As OrientationMetrics
    result.PricePerSticker = price
    result.StickersPerRow = stickersPerRow
    result.RowHeight = H + layoutGap

    CalculateOrientationMetrics = result
End Function

Sub CreateAdvancedLayout()
    ' Set the document units to millimeters for consistency
    ActiveDocument.Unit = cdrMillimeter

    ' --- User Input & Configuration Section ---
    ' Define default values as constants
    Const DEFAULT_VINYL_COST As Double = 460.0 ' Updated to match user's final spreadsheet logic
    Const DEFAULT_VAT_RATE As Double = 15.0
    Const DEFAULT_BATCH_SPACING As Double = 10.0

    ' Declare variables
    Dim stickerWidth As Double, stickerHeight As Double
    Dim requestedQuantity As Long
    Dim vinylCost As Double, vatRate As Double, batchSpacing As Double
    Dim hasBleed As Boolean

    ' Ensure there's an active selection to use as the base shape
    If ActiveDocument Is Nothing Or ActiveSelection.Shapes.Count = 0 Then
        MsgBox "Please select a base shape for the sticker.", vbExclamation, "No Selection"
        Exit Sub
    End If

    ' Get sticker dimensions from the selected shape (user sizes it appropriately)
    stickerWidth = ActiveSelection.Shapes(1).SizeWidth
    stickerHeight = ActiveSelection.Shapes(1).SizeHeight

    ' Set values from constants
    vinylCost = DEFAULT_VINYL_COST
    vatRate = DEFAULT_VAT_RATE
    batchSpacing = DEFAULT_BATCH_SPACING

    ' Prompt for bleed option
    Dim bleedChoice As String
    bleedChoice = InputBox("Does this job have bleed? (1 for Yes, 0 for No)", "Bleed Option", "1")
    hasBleed = (bleedChoice = "1")

    ' Prompt for quantity
    requestedQuantity = CLng(InputBox("Enter Total Number of Stickers Needed:", "Input Required", "100"))
    If requestedQuantity <= 0 Then Exit Sub

    ' --- Calculation & Decision Step ---
    ' Calculate metrics for both horizontal and vertical orientations
    Dim h_metrics As OrientationMetrics, v_metrics As OrientationMetrics
    h_metrics = CalculateOrientationMetrics(stickerWidth, stickerHeight, vinylCost, hasBleed)
    v_metrics = CalculateOrientationMetrics(stickerHeight, stickerWidth, vinylCost, hasBleed)

    ' Decide which orientation is better, prompting the user in ambiguous cases
    Dim isVertical As Boolean
    Const PRICE_TOLERANCE As Double = 0.01 ' 1 cent

    If Abs(h_metrics.PricePerSticker - v_metrics.PricePerSticker) > PRICE_TOLERANCE Then
        isVertical = (v_metrics.PricePerSticker < h_metrics.PricePerSticker)
    Else
        Dim prompt As String
        prompt = "Ambiguous choice: Prices are nearly identical." & vbCrLf & vbCrLf
        prompt = prompt & "1. Horizontal: " & h_metrics.StickersPerRow & " per row @ R" & Format(h_metrics.PricePerSticker, "0.00") & vbCrLf
        prompt = prompt & "2. Vertical:   " & v_metrics.StickersPerRow & " per row @ R" & Format(v_metrics.PricePerSticker, "0.00") & vbCrLf & vbCrLf
        prompt = prompt & "Enter 1 for Horizontal or 2 for Vertical."

        Dim choice As String
        choice = InputBox(prompt, "Choose Orientation", "1")

        isVertical = (choice = "2")
    End If

    ' --- Finalize Metrics and Prepare for Layout ---
    Dim finalPrice As Currency
    Dim stickersPerRow As Long
    Dim rowHeight As Double
    Dim layoutGap As Long

    If isVertical Then
        finalPrice = v_metrics.PricePerSticker
        stickersPerRow = v_metrics.StickersPerRow
        rowHeight = v_metrics.RowHeight
    Else
        finalPrice = h_metrics.PricePerSticker
        stickersPerRow = h_metrics.StickersPerRow
        rowHeight = h_metrics.RowHeight
    End If

    If hasBleed Then layoutGap = 0 Else layoutGap = 1

    ' --- Main Layout Logic ---
    Dim baseShape As Shape
    Set baseShape = ActiveSelection.Shapes(1)
    baseShape.SetSize stickerWidth, stickerHeight
    If isVertical Then baseShape.Rotate 90

    Dim layoutWidth As Double, layoutHeight As Double
    layoutWidth = baseShape.SizeWidth
    layoutHeight = baseShape.SizeHeight

    If stickersPerRow = 0 Then
        MsgBox "Cannot fit any stickers on the roll. Please check dimensions.", vbCritical, "Layout Error"
        Exit Sub
    End If

    Dim numRows As Long
    numRows = (requestedQuantity - 1) \ stickersPerRow + 1

    Dim totalStickers As Long
    totalStickers = numRows * stickersPerRow

    Const BATCH_MAX_HEIGHT As Long = 350
    Dim rowsPerBatch As Long
    If rowHeight > 0 Then rowsPerBatch = Int(BATCH_MAX_HEIGHT / rowHeight) Else rowsPerBatch = 0
    If rowsPerBatch = 0 Then
        MsgBox "A single row is taller than the maximum batch height of " & BATCH_MAX_HEIGHT & "mm.", vbCritical, "Layout Error"
        Exit Sub
    End If

    Dim numBatches As Long
    numBatches = (numRows - 1) \ rowsPerBatch + 1

    Dim pageStartX As Double, pageStartY As Double
    pageStartX = ActivePage.LeftX
    pageStartY = ActivePage.TopY

    Const ROLL_WIDTH_MM As Long = 650

    ' --- Layout Loop (Reversed) ---
    Dim batchShapeRanges() As ShapeRange
    ReDim batchShapeRanges(0 To numBatches - 1)
    Dim i As Long
    For i = 0 To numBatches - 1
        Set batchShapeRanges(i) = New ShapeRange
    Next i

    For i = totalStickers - 1 To 0 Step -1
        Dim globalRow As Long, globalCol As Long
        globalRow = Int(i / stickersPerRow)
        globalCol = i Mod stickersPerRow

        Dim batchNum As Long, rowInBatch As Long
        batchNum = Int(globalRow / rowsPerBatch)
        rowInBatch = globalRow Mod rowsPerBatch

        Dim batchX As Double, batchY As Double
        batchX = pageStartX + batchNum * (ROLL_WIDTH_MM + batchSpacing)
        batchY = pageStartY

        Dim xPos As Double, yPos As Double
        yPos = batchY - (rowInBatch * rowHeight) - (layoutHeight / 2)

        If (rowInBatch Mod 2) = 0 Then
            xPos = batchX + (globalCol * (layoutWidth + layoutGap)) + (layoutWidth / 2)
        Else
            xPos = batchX + ((stickersPerRow - 1 - globalCol) * (layoutWidth + layoutGap)) + (layoutWidth / 2)
        End If

        Dim newShape As Shape
        Set newShape = baseShape.Duplicate
        newShape.SetPosition xPos, yPos

        batchShapeRanges(batchNum).Add newShape
    Next i

    For i = 0 To numBatches - 1
        If batchShapeRanges(i).Count > 0 Then
            batchShapeRanges(i).Group
        End If
    Next i

    ' --- Final Quote Generation ---
    Dim quote As String
    Dim totalCostExclVat As Double
    totalCostExclVat = totalStickers * finalPrice

    Dim totalCostInclVat As Double
    totalCostInclVat = totalCostExclVat * (1 + (vatRate / 100))

    Const MIN_ORDER_AMOUNT As Double = 100.00

    quote = "--- Customer Quote ---" & vbCrLf & vbCrLf
    quote = quote & "Sticker Details: " & stickerWidth & "x" & stickerHeight & "mm" & vbCrLf
    quote = quote & "Bleed/Gap Applied: " & IIf(hasBleed, "Yes (user sized shape with bleed)", "No (1mm gap added for layout)") & vbCrLf
    quote = quote & "Chosen Orientation: " & IIf(isVertical, "Vertical", "Horizontal") & vbCrLf
    quote = quote & "Stickers per Row: " & stickersPerRow & vbCrLf & vbCrLf

    quote = quote & "Total Stickers to Produce: " & totalStickers & " (" & numRows & " rows)" & vbCrLf
    quote = quote & "Price per Sticker (excl. VAT): R " & Format(finalPrice, "0.00") & vbCrLf & vbCrLf

    quote = quote & "--------------------------------" & vbCrLf
    quote = quote & "Total (Excl. VAT): R " & Format(totalCostExclVat, "0.00") & vbCrLf
    quote = quote & "Total (Incl. " & vatRate & "% VAT): R " & Format(totalCostInclVat, "0.00") & vbCrLf
    quote = quote & "--------------------------------" & vbCrLf & vbCrLf

    If totalCostExclVat < MIN_ORDER_AMOUNT Then
        quote = quote & "NOTE: YOUR ORDER IS UNDER R" & MIN_ORDER_AMOUNT & ".00 EXCL VAT." & vbCrLf
        quote = quote & "WE HAVE A MINIMUM ORDER AMOUNT OF R" & MIN_ORDER_AMOUNT & ".00 EXCL VAT." & vbCrLf & vbCrLf
    End If

    quote = quote & "Layout has been generated with " & numBatches & " batch(es)." & vbCrLf
    quote = quote & "Please let us know if this quote is accepted to proceed with printing."

    MsgBox quote, vbInformation, "Layout & Quote Complete"

End Sub
