' Custom data type to hold the results of the pricing calculation
Private Type StickerMetrics
    PricePerSticker As Double
    StickersPerRow As Long
    IsVertical As Boolean ' True if vertical orientation is optimal
    RowHeight As Double     ' The height of a single row of stickers (including bleed/gap)
    LayoutGap As Long       ' The gap to use between stickers in the layout
End Type

' --- Function to Calculate Sticker Price and Layout Metrics ---
Private Function CalculatePrice(ByVal W As Double, ByVal H As Double, ByVal costPerSqm As Double, ByVal hasBleed As Boolean) As StickerMetrics
    ' --- Constants ---
    Const ROLL_WIDTH_MM As Long = 650
    Const MIN_PRICE_PER_STICKER As Double = 0.2

    ' Determine the gap/bleed amount based on user choice
    Dim bleedAmount As Long
    If hasBleed Then
        bleedAmount = 0 ' The bleed is already in the shape's dimensions
    Else
        bleedAmount = 1 ' Add a 1mm safety gap for non-bleed items
    End If

    Dim result As StickerMetrics
    result.LayoutGap = bleedAmount ' Store the gap for the layout logic
    Dim P_horizontal As Double, P_vertical As Double

    ' --- Horizontal Orientation Calculation ---
    Dim W_with_gap As Double
    W_with_gap = W + bleedAmount

    Dim S_raw_horizontal As Double
    S_raw_horizontal = ROLL_WIDTH_MM / W_with_gap

    Dim S_rounded_horizontal As Long
    If (S_raw_horizontal - Int(S_raw_horizontal)) >= 0.95 Then
        S_rounded_horizontal = Int(S_raw_horizontal) + 1
    Else
        S_rounded_horizontal = Int(S_raw_horizontal)
    End If

    If S_rounded_horizontal > 0 Then
        Dim H_with_gap_meters As Double
        H_with_gap_meters = (H + bleedAmount) / 1000

        Dim Area_horizontal As Double
        Area_horizontal = (ROLL_WIDTH_MM / 1000) * H_with_gap_meters

        Dim Row_Cost_horizontal As Double
        Row_Cost_horizontal = Area_horizontal * costPerSqm

        P_horizontal = Row_Cost_horizontal / S_rounded_horizontal
    Else
        P_horizontal = 1E+30
    End If

    ' --- Vertical Orientation Calculation ---
    Dim H_with_gap As Double
    H_with_gap = H + bleedAmount

    Dim S_raw_vertical As Double
    S_raw_vertical = ROLL_WIDTH_MM / H_with_gap

    Dim S_rounded_vertical As Long
    If (S_raw_vertical - Int(S_raw_vertical)) >= 0.95 Then
        S_rounded_vertical = Int(S_raw_vertical) + 1
    Else
        S_rounded_vertical = Int(S_raw_vertical)
    End If

    If S_rounded_vertical > 0 Then
        Dim W_with_gap_meters As Double
        W_with_gap_meters = (W + bleedAmount) / 1000

        Dim Area_vertical As Double
        Area_vertical = (ROLL_WIDTH_MM / 1000) * W_with_gap_meters

        Dim Row_Cost_vertical As Double
        Row_Cost_vertical = Area_vertical * costPerSqm

        P_vertical = Row_Cost_vertical / S_rounded_vertical
    Else
        P_vertical = 1E+30
    End If

    ' --- Compare and Finalize Results ---
    If P_horizontal <= P_vertical Then
        result.PricePerSticker = P_horizontal
        result.StickersPerRow = S_rounded_horizontal
        result.IsVertical = False
        result.RowHeight = H + bleedAmount
    Else
        result.PricePerSticker = P_vertical
        result.StickersPerRow = S_rounded_vertical
        result.IsVertical = True
        result.RowHeight = W + bleedAmount
    End If

    ' Enforce minimum price
    If result.PricePerSticker < MIN_PRICE_PER_STICKER Then
        result.PricePerSticker = MIN_PRICE_PER_STICKER
    End If

    CalculatePrice = result
End Function

Sub CreateAdvancedLayout()
    ' Set the document units to millimeters for consistency
    ActiveDocument.Unit = cdrMillimeter

    ' --- User Input & Configuration Section ---
    ' Define default values as constants
    Const DEFAULT_VINYL_COST As Double = 420.0
    Const DEFAULT_VAT_RATE As Double = 15.0
    Const DEFAULT_BATCH_SPACING As Double = 10.0

    ' Declare variables
    Dim stickerWidth As Double, stickerHeight As Double
    Dim requestedQuantity As Long
    Dim vinylCost As Double, vatRate As Double, batchSpacing As Double
    Dim hasBleed As Boolean

    ' Ensure there's an active selection to use as the base shape
    If ActiveDocument Is Nothing Or ActiveSelection.Shapes.Count = 0 Then
        MsgBox "Please select a base shape for the sticker.", vbExclamation, "No Selection"
        Exit Sub
    End If

    ' Get sticker dimensions from the selected shape
    stickerWidth = ActiveSelection.Shapes(1).SizeWidth
    stickerHeight = ActiveSelection.Shapes(1).SizeHeight

    ' Set values from constants
    vinylCost = DEFAULT_VINYL_COST
    vatRate = DEFAULT_VAT_RATE
    batchSpacing = DEFAULT_BATCH_SPACING

    ' Prompt for bleed option
    Dim hasBleedStr As String
    hasBleedStr = LCase(InputBox("Does this layout include bleed? (yes/no)", "Bleed Option", "yes"))
    hasBleed = (hasBleedStr = "yes")

    ' Prompt for quantity
    requestedQuantity = CLng(InputBox("Enter Total Number of Stickers Needed:", "Input Required", "100"))
    If requestedQuantity <= 0 Then Exit Sub

    ' --- Calculation Step ---
    Dim metrics As StickerMetrics
    metrics = CalculatePrice(stickerWidth, stickerHeight, vinylCost, hasBleed)

    ' --- Main Layout Logic ---
    ' Get the base shape to duplicate
    Dim baseShape As Shape
    Set baseShape = ActiveSelection.Shapes(1)

    ' Determine the layout dimensions based on optimal orientation
    Dim layoutWidth As Double, layoutHeight As Double
    Dim layoutGap As Long
    layoutGap = metrics.LayoutGap

    ' Set the size of the base shape to the detected dimensions first
    baseShape.SetSize stickerWidth, stickerHeight

    ' Rotate the shape if vertical orientation is more efficient
    If metrics.IsVertical Then
        baseShape.Rotate 90
    End If

    ' Now get the final layout dimensions from the potentially rotated shape
    layoutWidth = baseShape.SizeWidth
    layoutHeight = baseShape.SizeHeight

    ' Calculate total stickers needed (rounding up to a full row)
    Dim stickersPerRow As Long
    stickersPerRow = metrics.StickersPerRow
    If stickersPerRow = 0 Then
        MsgBox "Cannot fit any stickers on the roll. Please check dimensions.", vbCritical, "Layout Error"
        Exit Sub
    End If

    Dim numRows As Long
    numRows = (requestedQuantity - 1) \ stickersPerRow + 1

    Dim totalStickers As Long
    totalStickers = numRows * stickersPerRow

    ' Calculate batch properties
    Const BATCH_MAX_HEIGHT As Long = 350
    Dim rowHeight As Double
    rowHeight = metrics.RowHeight

    Dim rowsPerBatch As Long
    rowsPerBatch = Int(BATCH_MAX_HEIGHT / rowHeight)
    If rowsPerBatch = 0 Then
        MsgBox "A single row is taller than the maximum batch height of " & BATCH_MAX_HEIGHT & "mm.", vbCritical, "Layout Error"
        Exit Sub
    End If

    Dim numBatches As Long
    numBatches = (numRows - 1) \ rowsPerBatch + 1

    ' Get page starting coordinates
    Dim pageStartX As Double, pageStartY As Double
    pageStartX = ActivePage.LeftX
    pageStartY = ActivePage.TopY

    Const ROLL_WIDTH_MM As Long = 650

    ' --- Layout Loop ---
    Dim stickerCount As Long
    stickerCount = 0

    Dim batchNum As Long, rowInBatch As Long, colInRow As Long
    For batchNum = 0 To numBatches - 1
        ' Calculate the top-left origin of the current batch
        Dim batchX As Double, batchY As Double
        batchX = pageStartX + batchNum * (ROLL_WIDTH_MM + batchSpacing)
        batchY = pageStartY

        For rowInBatch = 0 To rowsPerBatch - 1
            Dim globalRow As Long
            globalRow = batchNum * rowsPerBatch + rowInBatch
            If globalRow >= numRows Then Exit For

            For colInRow = 0 To stickersPerRow - 1
                ' Check if we have created enough stickers
                If stickerCount >= totalStickers Then Exit For

                ' Calculate sticker center position with boustrophedon layout
                Dim xPos As Double, yPos As Double

                yPos = batchY - (rowInBatch * rowHeight) - (layoutHeight / 2)

                If (rowInBatch Mod 2) = 0 Then ' Even rows: Left-to-Right
                    xPos = batchX + (colInRow * (layoutWidth + layoutGap)) + (layoutWidth / 2)
                Else ' Odd rows: Right-to-Left
                    xPos = batchX + ((stickersPerRow - 1 - colInRow) * (layoutWidth + layoutGap)) + (layoutWidth / 2)
                End If

                ' Create and position the duplicate
                Dim newShape As Shape
                Set newShape = baseShape.Duplicate
                newShape.SetPosition xPos, yPos

                stickerCount = stickerCount + 1
            Next colInRow
        Next rowInBatch
    Next batchNum

    ' --- Final Quote Generation ---
    Dim quote As String
    Dim totalCostExclVat As Double
    totalCostExclVat = totalStickers * metrics.PricePerSticker

    Dim totalCostInclVat As Double
    totalCostInclVat = totalCostExclVat * (1 + (vatRate / 100))

    Const MIN_ORDER_AMOUNT As Double = 100.00

    ' Build the quote string
    quote = "--- Customer Quote ---" & vbCrLf & vbCrLf
    quote = quote & "Sticker Details: " & stickerWidth & "x" & stickerHeight & "mm" & vbCrLf
    quote = quote & "Bleed/Gap Applied: " & IIf(hasBleed, "Yes (used shape size as-is)", "No (added " & layoutGap & "mm gap)") & vbCrLf
    quote = quote & "Optimal Orientation: " & IIf(metrics.IsVertical, "Vertical", "Horizontal") & vbCrLf
    quote = quote & "Stickers per Row: " & stickersPerRow & vbCrLf & vbCrLf

    quote = quote & "Total Stickers to Produce: " & totalStickers & " (" & numRows & " rows)" & vbCrLf
    quote = quote & "Price per Sticker (excl. VAT): R " & Format(metrics.PricePerSticker, "0.00") & vbCrLf & vbCrLf

    quote = quote & "--------------------------------" & vbCrLf
    quote = quote & "Total (Excl. VAT): R " & Format(totalCostExclVat, "0.00") & vbCrLf
    quote = quote & "Total (Incl. " & vatRate & "% VAT): R " & Format(totalCostInclVat, "0.00") & vbCrLf
    quote = quote & "--------------------------------" & vbCrLf & vbCrLf

    ' Check for minimum order amount
    If totalCostExclVat < MIN_ORDER_AMOUNT Then
        quote = quote & "NOTE: YOUR ORDER IS UNDER R" & MIN_ORDER_AMOUNT & ".00 EXCL VAT." & vbCrLf
        quote = quote & "WE HAVE A MINIMUM ORDER AMOUNT OF R" & MIN_ORDER_AMOUNT & ".00 EXCL VAT." & vbCrLf & vbCrLf
    End If

    quote = quote & "Layout has been generated with " & numBatches & " batch(es)." & vbCrLf
    quote = quote & "Please let us know if this quote is accepted to proceed with printing."

    ' Display the final quote
    MsgBox quote, vbInformation, "Layout & Quote Complete"

End Sub
